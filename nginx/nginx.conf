
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user - $host - $http_host ["$request"] '
                      '$http_cookie {$status $body_bytes_sent} "$http_referer" '
                      '"$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    gzip on; 
    gzip_static on;#优先使用服务器上.gz文件
    gzip_buffers 16 16k;#获取多少内存用于缓存压缩结果，‘16 16k’表示以16k*16为单位获得
    gzip_disable "msie6";
    #gzip_comp_level 5;
    gzip_min_length 1024;#设置最小压缩限制，1kb以下文件gzip压缩后可能会更大
    gzip_types text/plain application/json application/javascript text/css;#限制压缩文件类型

    proxy_cache_path cache levels=1:2 keys_zone=tcache:10m max_size=2g;
    upstream depot {    
        server 10.3.14.231:8080;
    }
    upstream depot1 {
        server ly.zhiyingyixue.com:8081;
    }

    server {
        listen       8081 ssl http2;
        server_name  test.com;
        #ssl on;
        ssl_certificate      ../ssl/mykey.crt;
        #ssl_certificate_key  ../ssl/mykey.key;
        ssl_certificate_key  ../ssl/unsecurekey.key.unsecure;#避免每次reload都要输入密码
        ssl_session_cache shared:SSL:10m;#ssl会话缓存，类型为shared,大小10M
        ssl_session_timeout 10m;#客户端可以重用会话缓存中ssl参数的过期时间
        keepalive_timeout 10m;#keep-alive在服务器端保持的超时值，减少请求ssl会话协商的开销

        #charset koi8-r;
        #access_log  logs/access.log  main;

        location ~ ^/m/ {
            proxy_pass http://depot1;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            access_log  logs/mytest.log  main;
        }

        location /film/ {
            #代理缓存配置
            #proxy_cache tcache;
            #proxy_cache_key $uri;
            #add_header X-Cache $upstream_cache_status;
            #proxy_cache_valid 200 301 302 60m;
            #proxy_cache_valid 404         30m;

            #set $p_uri $uri;
            #if ($uri ~ \.([0-9]|[a-z])+(\.\w+)?\.((js)|(css))$){
            #    log_format combined '$1';
            #}
            proxy_pass http://depot;
            #返回301/302时重定向配置，配置方式：proxy_redirect 原地址 重定向地址
            #proxy_redirect default;#默认为default，因此此项可删除

            #proxy_set_header为nginx设置请求头，并将头信息传递到服务器端
            #如：服务器通过request.getHeader("X-Real-IP")获取$remote_addr
            
            #$host：客户端访问源
            proxy_set_header Host $host;

            #$remote_addr：代理后的客户端IP，使用反向代理后，服务器通过request.getRemoteAddr()
            #获取的ip不是真实ip（如获取到127.0.0.1），以下为将上一级代理ip添加至请求头
            proxy_set_header X-Real-IP $remote_addr;

            #猜测是服务器端想用request.getRmoteHost()获取代理ip
            proxy_set_header REMOTE-HOST $remote_addr;

            #$proxy_add_x_forwarded_for会自动添加上一级代理ip至X-Forwarded-For尾部，以便服务器获取整个代理过程
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            if ($uri = /film/){
                add_header Cache-Control 'no-store';
            }
            # add_header Content-Encoding 'gzip';
            #if ($p_uri ~ (\.gz)$){
            #    add_header Content-Encoding 'gzip';
            #}
            #if ($p_uri ~ (\.css.gz)$){
            #    add_header Content-Type 'text/css';
            #}
        }
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
